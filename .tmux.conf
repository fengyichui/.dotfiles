# cat << EOF > /dev/null
# Hierarchy:
#  Server
#    Session
#      Window
#        Pane

# Options:
# - Session options (set-option [-g])
# - Window options (set-window-option [-g])

# -------------------------------------------------------------------
# options
# -------------------------------------------------------------------
# Change bind key to ctrl-a
#unbind-key c-b
#set-option -g prefix c-a

# Index starts from 1
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Renumber windows when a window is closed
set-window-option -g automatic-rename on
set-option -g renumber-windows on

# Set titles
set -g set-titles on
set -g set-titles-string 'â˜… #T (#S:#I:#P - #W)'

# History
set-option -g history-limit 102400

# Repeat time limit (ms)
set-option -g repeat-time 500

# add custom term
set -g default-terminal "tmux-256color"
set -as terminal-overrides ',xterm*:sitm=\E[3m'
set-window-option -g xterm-keys on
set -sg focus-events on

# always reattach to user namespace
#set-option -g default-command "reattach-to-user-namespace -l $(echo $SHELL)"

# Key binding in the status line (bind-key :)
set-option -g status-keys emacs

# Mouse
set-option -g mouse on

# Escape delay
set -sg escape-time 1

# Cygwin: keep current dir
set-environment -g CHERE_INVOKING 1

# Copy-mode
set-window-option -g mode-keys vi

# word delimiters for select mode
set-option -g word-separators " '\"\t=,()[]{}"

# -------------------------------------------------------------------
# Key bindings
# -------------------------------------------------------------------
# prefix c
bind-key c new-window -c "#{pane_current_path}"

# prefix C-d ot detach
bind-key c-d detach-client

# split window
bind-key c-b split-window -v -c "#{pane_current_path}"
bind-key v   split-window -h -c "#{pane_current_path}"
bind-key s   split-window -v -c "#{pane_current_path}"
bind-key |   split-window -h -c "#{pane_current_path}"
#bind-key -   split-window -v -c "#{pane_current_path}"

# Moving windows
bind-key -r > swap-window -t :+
bind-key -r < swap-window -t :-

# Back and forth
bind-key bspace previous-window
bind-key space next-window
bind-key / next-layout # Overridden

# Pane-movement
bind-key h select-pane -L
bind-key l select-pane -R
bind-key j select-pane -D
bind-key k select-pane -U
bind-key tab select-pane -t :.+
bind-key btab select-pane -t :.-

# Synchronize panes
bind-key * set-window-option synchronize-pane

# Reload ~/.tmux.conf
bind-key R source-file ~/.tmux.conf \; display-message "Reloaded!"

# vi copy mode
# is in vim
is_vim="tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$'"
# General key
bind-key -T copy-mode-vi v                  send -X begin-selection
bind-key -T copy-mode-vi C-v                send -X rectangle-toggle
bind-key -T copy-mode-vi q                  send -X clear-selection
bind-key -T copy-mode-vi Escape             send -X cancel
bind-key -T copy-mode-vi Home               send -X start-of-line
bind-key -T copy-mode-vi End                send -X end-of-line
bind-key -T copy-mode-vi y                  send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Y                  send-keys -X copy-line\; run "tmux save-buffer - | pbcopy"
bind-key -T copy-mode-vi D                  send-keys -X copy-end-of-line\; run "tmux save-buffer - | pbcopy"
bind-key -T copy-mode-vi PageUp             send-keys -X halfpage-up
bind-key -T copy-mode-vi PageDown           send-keys -X halfpage-down
bind-key -T root         PageUp             if-shell "$is_vim" "send-keys PageUp" "copy-mode -e\; send-keys -X halfpage-up"
bind-key -T root         PageDown           if-shell "$is_vim" "send-keys PageDown" "copy-mode -e\; send-keys -X halfpage-down"
# Mouse left button
bind-key -T copy-mode-vi MouseDown1Pane     select-pane\; send-keys -X clear-selection
bind-key -T copy-mode-vi MouseDragEnd1Pane  select-pane\; send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi DoubleClick1Pane   select-pane\; send-keys -X select-word\; send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi TripleClick1Pane   select-pane\; send-keys -X select-line\; send-keys -X copy-pipe "pbcopy"
bind-key -T root         DoubleClick1Pane   if-shell "$is_vim" "send-keys -M" "select-pane\; copy-mode -e\; send-keys -X select-word\; send-keys -X copy-pipe 'pbcopy'"
bind-key -T root         TripleClick1Pane   if-shell "$is_vim" "send-keys -M" "select-pane\; copy-mode -e\; send-keys -X select-line\; send-keys -X copy-pipe 'pbcopy'"
# Mouse middle button
bind-key -T copy-mode-vi MouseDown2Pane     select-pane\; send -X cancel\; run-shell 'pbpaste | tmux load-buffer - && tmux paste-buffer'
bind-key -T root         MouseDown2Pane     if-shell "$is_vim" "send-keys -M" "select-pane\; run-shell 'pbpaste | tmux load-buffer - && tmux paste-buffer'"
# Mouse right button
bind-key -T copy-mode-vi MouseDown3Pane     select-pane\; send -X cancel
bind-key -T root         MouseDown3Pane     select-pane
# Mouse Wheel
bind-key -T copy-mode-vi WheelUpPane        select-pane \; send-keys -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane      select-pane \; send-keys -X -N 3 scroll-down

bind-key -T root WheelUpPane \
    if -Ft= "#{mouse_any_flag}" \
      "send-keys -M" \
      " \
        select-pane -t= ; \
        if -Ft= '#{alternate_on}' \
          \"send-keys up ; send-keys up ; send-keys up\" \
          \" \
            if -Ft= '#{pane_in_mode}' \
            'send-keys -M ; send-keys -M ; send-keys -M' \
            'copy-mode -e; send-keys -M ; send-keys -M ; send-keys -M' \
          \" \
      "

bind-key -T root WheelDownPane \
    if -Ft= "#{mouse_any_flag}" \
      "send-keys -M" \
      " \
        select-pane -t= ; \
        if -Ft= '#{alternate_on}' \
          'send-keys down ; send-keys down ; send-keys down' \
          'send-keys -M ; send-keys -M ; send-keys -M' \
      "

# Capture pane and open in Vim
bind-key C-v run 'tmux capture-pane -S -102400 -p > /tmp/tmux-capture.txt'\;\
             new-window "vim /tmp/tmux-capture.txt"

# zoom this pane to full screen
bind-key +  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
            swap-pane -s tmux-zoom.1 \;\
            select-window -t tmux-zoom
# restore this pane
bind-key -  last-window \;\
            swap-pane -s tmux-zoom.1 \;\
            kill-window -t tmux-zoom

# toggle mouse
bind-key m run "cut -c3- ~/.tmux.conf | bash -s _toggle_mouse"

# kill all panes(and its process) in current session
bind-key C-q run "cut -c3- ~/.tmux.conf | bash -s _safe_kill_panes_of_current_session"

# -------------------------------------------------------------------
# Decoration (256-color)
# -------------------------------------------------------------------
set-option -g status off
set-option -g pane-active-border-fg colour5
set-option -g pane-border-fg colour239
#set-option -g status-justify left
#set-option -g status-left '#[bg=colour72] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour185] #h #[bg=colour236] '
#set-option -g status-left-length 32
#set-option -g status-bg colour237
#set-option -g status-right '#[bg=colour236] #[bg=colour235]#{?client_prefix,#[fg=colour5] <Prefix> #[bg=colour236] #[bg=colour235],}#[fg=colour185] %H:%M #[bg=colour236] #[bg=colour237] #[bg=colour72] '
#set-option -g status-interval 10
#set-window-option -g window-status-format '#[bg=colour238]#[fg=colour107] #I #[bg=colour239]#[fg=colour110] #[bg=colour240]#W#[bg=colour239]#[fg=colour195]#F#[bg=colour238] '
#set-window-option -g window-status-current-format '#[bg=colour236]#[fg=colour215] #I #[bg=colour235]#[fg=colour167] #[bg=colour234]#W#[bg=colour235]#[fg=colour195]#F#[bg=colour236] '

# -------------------------------------------------------------------
# fzf integration
# -------------------------------------------------------------------
# Tmux completion
bind-key -n 'M-t' run "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(tmuxwords.rb --all --scroll 1000 --min 5 | fzf --multi | paste -sd\\  -)\"'"

# fzf-locate (all)
bind-key -n 'M-`' run "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(fzf -m | paste -sd\\  -)\"'"

# select-pane (@george-b)
bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# _toggle_mouse() {
#   old=$(tmux show -g | grep mouse | head -n 1 | cut -d' ' -f2)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \; display "mouse: $new"
# }
#
# _apply_vi_copy_bindings() {
#   if command -v pbcopy > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'pbcopy' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'pbcopy' 2> /dev/null || true
#   fi
#   if command -v reattach-to-user-namespace > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy' 2> /dev/null || true
#   fi
#   if command -v xsel > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'xsel -i -b' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xsel -i -b' 2> /dev/null || true
#   fi
#   if ! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'xclip -i -selection clipboard > /dev/null 2>&1' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -selection clipboard > /dev/null 2>&1' 2> /dev/null || true
#   fi
#   if command -v clip.exe > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'clip.exe' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'clip.exe' 2> /dev/null || true
#   fi
#   if [ -c /dev/clipboard ] > /dev/null 2>&1; then
#     tmux bind -t vi-copy y copy-pipe 'cat > /dev/clipboard' 2> /dev/null || true
#     tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'cat > /dev/clipboard' 2> /dev/null || true
#   fi
# }
#
# __safe_kill_panes_of_current_session() {
#   session_name=$(tmux display-message -p '#S')
#   current_panes=$(tmux list-panes -a -F "#{pane_id} #{pane_current_command} #{session_name}\n" | grep "$session_name")
#   SAVEIFS="$IFS"
#   IFS=$'\n'
#   array=($current_panes)
#   IFS=$SAVEIFS
#   for (( i=0; i<${#array[@]}; i++ ))
#   do
#     old_ifs="$IFS"
#     IFS=$'\n'
#     for pane_set in "${array[$i]}"; do
#       pane_id=$(echo "$pane_set" | awk -F " " '{print $1}')
#       pane_proc=$(echo "$pane_set" | awk -F " " '{print tolower($2)}')
#       cmd="C-c"
#       if [[ "$pane_proc" == "vim" ]] || [[ "$pane_proc" == "nvim" ]]; then
#         cmd='":qa" Enter'
#       elif [[ "$pane_proc" == "man" ]] || [[ "$pane_proc" == "less" ]]; then
#         cmd='"q"'
#       elif [[ "$pane_proc" == "bash" ]] || [[ "$pane_proc" == "zsh" ]] || [[ "$pane_proc" == "fish" ]]; then
#         cmd='C-c C-u space "exit" Enter'
#       elif [[ "$pane_proc" == "ssh" ]] || [[ "$pane_proc" == "vagrant" ]]; then
#         cmd='Enter "~."'
#       elif [[ "$pane_proc" =~ "gdb" ]]; then
#         cmd='C-c "quit" Enter'
#       elif [[ "$pane_proc" =~ "python" ]]; then
#         cmd='C-c "exit()" Enter'
#       fi
#       echo $cmd | xargs -n1 tmux send-keys -t "$pane_id"
#     done
#     IFS="$old_ifs"
#     # sleep 0.1
#   done
# }
#
# _safe_kill_panes_of_current_session() {
#   __safe_kill_panes_of_current_session
#   __safe_kill_panes_of_current_session
# }
#
# "$@"

