#!/usr/bin/env python3

import sys
import struct
import getopt

usage_string = '''
Usage:
  binunpack [options] <format> <file/hex_string>

Options:
  -x, --hex         show as hex
  -b, --begin       file position begin (default: begin of file)
  -e, --end         file position end (default: end of file)
  -l, --length      file position length (default: size of file)
  -h, --help        Show this help

Format:
  The format char indicates byte order, size and alignment:
    <: little-endian, std. size & alignment
    >: big-endian, std. size & alignment
  The remaining chars indicate types of args and must match exactly;
  these can be preceded by a decimal repeat count:
    x: pad byte (no data)   1
    c: char                 1
    b: signed byte          1
    B: unsigned byte        1
    h: short                2
    H: unsigned short       2
    i: int                  4
    I: unsigned int         4
    l: long                 8
    L: unsigned long        8
    f: float                4
    d: double               8
    e: half-float           2
    ?: _Bool                1
  Special cases (preceding decimal count indicates length):
    s: string (array of char);
    p: pascal string (with count byte).
  Special cases:
    q: long long
    Q: unsigned long long
  Whitespace between formats is ignored.

Example:
  binunpack -b 0xff000 -e 0xff0c0 "<4sHH4IB3xf" image.bin
  -> unpack image.bin from 0xff000 to 0xff0c0, struct is:
      struct {
        uint8_t  a[4];  // 4s
        uint16_t b;     // H
        uint16_t c;     // H
        uint32_t d[4];  // 4I
        uint8_t  e;     // B
        uint8_t  f[3];  // 3x   padding
        float    g;     // f
      }

  binunpack "<4sHH" "11 22 33 44 55 66 77 88"
'''

def usage ():
    print(usage_string)

hex_show = False
pos_begin = 0
pos_end = 0
pos_length = 0

options = "hxb:e:l:"
long_options = ["help", "hex", "begin=", "end=", "length="]

try:
    opts, args = getopt.getopt(sys.argv[1:], options, long_options)
except getopt.GetoptError:
    usage()
    sys.exit(1)

if len(args) != 2:
    usage()
    sys.exit(1)

for opt, arg in opts:
    if opt in ("-h", "--help"):
        usage()
        sys.exit(0)

    elif opt in ("-x", "--hex"):
        hex_show = True

    elif opt in ("-b", "--begin"):
        pos_begin = int(arg, 0)

    elif opt in ("-e", "--end"):
        pos_end = int(arg, 0)

    elif opt in ("-l", "--length"):
        pos_length = int(arg, 0)

fmt = args[0]
unpackthing = args[1]

try:
    fo = open(unpackthing, 'rb')

    if pos_end > 0 and pos_length == 0:
        pos_length = pos_end - pos_begin

    if pos_begin < 0:
        fo.seek(pos_begin, 2)
    else:
        fo.seek(pos_begin, 0)

    if pos_length == 0:
        fbytes = fo.read()
    else:
        fbytes = fo.read(pos_length)

except:
    fbytes = bytes.fromhex(unpackthing)

    if pos_length > 0 and pos_end == 0:
        pos_end = pos_begin + pos_length

    if pos_end != 0:
        fbytes = fbytes[pos_begin:pos_end]

print("Unpack binary real length {} bytes".format(len(fbytes)))

try:
    unpacklist = struct.unpack(fmt, fbytes)
except Exception as e:
    print("Error: {}".format(e))
    sys.exit(2)

for i,data in enumerate(unpacklist):
    print("{:2d}: ".format(i), end='')
    if hex_show:
        if isinstance(data, int):
            print("0x{:X}".format(data))
        elif isinstance(data, bytes):
            print("{}".format(' '.join('%02X' % x for x in data)))
        else:
            print("{}".format(data))
    else:
        print("{}".format(data))

