#!/usr/bin/env python3
######################################################################
# @file makekeil.py
# @brief 
# @date 2016/11/10 9:20:29
# @author liqiang
#
# @addtogroup 
# @ingroup 
# @details 
#
# @{
######################################################################

######################################################################
# IMPORT
######################################################################
import sys
import os
import time
import subprocess
import tempfile
import glob
import platform
import re
import signal

######################################################################
# VARIABLES
######################################################################
keilparams = {'build':      '-j0 -b',
              'rebuild':    '-j0 -r',
              'buildall':   '-j0 -z -b',
              'rebuildall': '-j0 -z -r',
              'clean':      '-j0 -c',
              'debug':      '-d',
              'download':   '-j0 -f'}

keil_process = None
tail_process = None

uname = subprocess.getoutput("uname -a")
in_cygwin = re.search(r'cygwin', uname, re.I)
in_wsl    = re.search(r'microsoft', uname, re.I)

flag = 'build'
uvproj = '.'
target = None

for arg in sys.argv[1:]:
    if arg == '-h' or arg == '--help' or arg == 'help':
        print("makekeil [build/rebuild/buildall/rebuildall/clean/debug/download] [*.uvproj] [target]")
        sys.exit()
    elif arg in keilparams:
        flag = arg
    elif os.path.exists(arg):
        uvproj = arg
    else:
        target = arg

uvproj = os.path.abspath(uvproj)
if os.path.isdir(uvproj):
    uvprojs = glob.glob(uvproj + '/*.uvproj')
    if len(uvprojs)==0:
        print("[Error] Not exist uvproj project: " + uvproj)
        sys.exit(-2)
    else:
        uvproj = uvprojs[0]

if target == None:
    print('{}: {}'.format(flag, uvproj))
else:
    print('{}: {} (target="{}")'.format(flag, uvproj, target))
print('Entering directory: {}'.format(os.path.dirname(uvproj)))
sys.stdout.flush()

######################################################################
# FUNCTIONS
######################################################################
def kill_windows_process(commandline):
#    print("Kill Windows Process [{}] ...".format(commandline.split(' ')[0]))
    s = signal.signal(signal.SIGINT, signal.SIG_IGN)
    kill_process = subprocess.Popen(['wmic.exe', 'Path', 'win32_process', 'Where',
                                     "CommandLine Like '%" + commandline.replace('\\', '\\\\') + "%'",
                                     'Call', 'Terminate'],
                                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    kill_process.wait()
    signal.signal(signal.SIGINT, s)

def kill_keil_process(keil_process, keil_cmd):
    try:
        if in_wsl:
            print("\nKill Windows Process [UV4.exe] ...")
            kill_windows_process(' '.join(keil_cmd))
        keil_process.kill()
        keil_process.wait()
    except:
        pass

def kill_tail_process(tail_process, tail_cmd):
    try:
        if in_wsl:
            kill_windows_process(' '.join(tail_cmd))
        tail_process.kill()
        tail_process.wait()
    except:
        pass

######################################################################
# MAIN
######################################################################

if in_wsl:
    # keil not support "\\wsl$\Ubuntu-18.04" path type
    tmpfilename_win = subprocess.getoutput('cmd.exe /c "<nul set /p=%TEMP%\\uv4_%RANDOM%.log" 2>/dev/null')
    tmpfilename = subprocess.getoutput("wslpath -u '{}'".format(tmpfilename_win))
    uvproj_win = subprocess.getoutput("wslpath -w '{}'".format(uvproj))
    open(tmpfilename, 'w').close()
else:
    tmpfilefd, tmpfilename = tempfile.mkstemp()
    os.close(tmpfilefd)
    if in_cygwin:
        uvproj_win = subprocess.getoutput("cygpath -w '{}'".format(uvproj))
        tmpfilename_win = subprocess.getoutput("cygpath -w '{}'".format(tmpfilename))
    else:
        uvproj_win = uvproj
        tmpfilename_win = tmpfilename

keil_cmd = ['UV4.exe'] + keilparams[flag].split() + [uvproj_win, '-o', tmpfilename_win]
if target != None: keil_cmd += ['-t', target]
if in_wsl: tail_cmd = ['powershell.exe', 'Get-Content', tmpfilename_win, '-Wait']
else:      tail_cmd = ['tail', '-f', tmpfilename]

try:
    keil_process = subprocess.Popen(keil_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    tail_process = subprocess.Popen(tail_cmd,                            stderr=subprocess.DEVNULL)
except:
    kill_keil_process(keil_process, keil_cmd)

while True:
    try:
        keil_process.wait()
        time.sleep(0.1)
        kill_tail_process(tail_process, tail_cmd)
        break
    except:
        kill_keil_process(keil_process, keil_cmd)

while True:
    try:
        if os.path.isfile(tmpfilename):
            os.unlink(tmpfilename)
        break
    except:
        try:
            time.sleep(0.1)
        except:
            print("\nDelete temporary file ...")

print('Leaving directory')
sys.stdout.flush()
#os.system("reset -w")

# @} #

