#!/bin/bash

device="Cortex-M3"
speed="auto"
port="2331"
rtos=""
select=""

function usage ()
{
    cat <<EOF
GDB Server with SEGGER JLink
Options:
  -f|--force        Force start JLink GDB server (Kill running server)
  -r|--restart      Restart JLink GDB server
  -p|--port=*       Listen port (2331)
  -d|--device=*     Device (Cortex-M3)
  -s|--speed=*      Speed kB/s (auto)
  -u|--usb=*        Specifies USB SerialNo to connect
  -i|--ip=*         Specifies IP address to connect
  -h|--help         Show this help
  --embos           Use RTOS Plugin: embOS
  --freertos        Use RTOS Plugin: FreeRTOS
  --chibios         Use RTOS Plugin: ChibiOS

Supported Devices: https://www.segger.com/jlink_supported_devices.html
EOF

    exit 0
}

# Parse argument
for i in "$@"
do
    case $i in
        -f|--force) force_startup=1 ;;
        -r|--restart) restartit=1 ;;
        -p=*|--port=*) port="${i#*=}" ;;
        -d=*|--device=*) device="${i#*=}" ;;
        -s=*|--speed=*) speed="${i#*=}" ;;
        -u=*|--usb=*) select="-select usb=${i#*=}" ;;
        -i=*|--ip=*) select="-select ip=${i#*=}" ;;

        --embos)    rtos="-rtos GDBServer/RTOSPlugin_embOS" ;;
        --freertos) rtos="-rtos GDBServer/RTOSPlugin_FreeRTOS" ;;
        --chibios)  rtos="-rtos GDBServer/RTOSPlugin_ChibiOS" ;;

        -h|--help) usage ;;
        *) usage ;;
    esac
done

# restart file
restartfile="/tmp/JLinkGDBServer-RESTART-$port"
scriptrunningfile="/tmp/JLinkGDBServer-SCRIPT-RUNNING-$port"
exerunningfile="/tmp/JLinkGDBServer-EXE-RUNNING-$port"
logfile="/tmp/JLinkGDBServer-LOG-$port"
pidfile="/tmp/JLinkGDBServer-PID-$port"

# restart
if [[ -n "$restartit" ]]; then
    if [[ -f "$scriptrunningfile" ]]; then
        echo -n "JLinkGDBServer Restarting... "

        rm -rf "$exerunningfile"
        touch "$restartfile"

        exerunning=0
        timeout=0
        while true; do
            if [[ "$exerunning" == "0" ]]; then
                # check JLinkGDBServer running
                if [[ -f "$exerunningfile" ]]; then
                    exerunning=1
                fi
            else
                # check flag from log file
                if [[ -f "$logfile" ]]; then
                    if grep -q 'Waiting for GDB connection' "$logfile"; then
                        echo "OK"
                        exit 0
                    fi
                fi
                # check JLinkGDBServer exit
                if [[ ! -f "$exerunningfile" ]]; then
                    echo "Fail"
                    exit -1
                fi
            fi

            # check timeout
            if (($timeout>30)); then
                echo "Timeout"
                exit 0
            fi

            timeout=$(($timeout + 1))
            sleep 0.2
        done
    else
        echo "JLinkGDBServer Script Not Running"
        exit -1
    fi
fi

# check process
if [[ -n "$force_startup" ]]; then
    jlinkpid=$(pgrep -i JLinkGDBServer)
    if [[ -n "$jlinkpid" ]]; then
        echo "JLinkGDBServer is already running! Kill It!"
        kill $jlinkpid
        wait $jlinkpid
        echo ""
    fi
fi

# add device Cortex-CM3, jlinkGdbServer will wait chip wakeuped, and then connect
params="-device $device -speed $speed -port $port $select -if SWD -nolocalhostonly -nologtofile -halt -nosilent -vd -noir -notimeout $rtos"

# Segger Jlink GDB Server
if [[ "$OSTYPE" =~ "cygwin" ]]; then
    gdbserver=JLinkGDBServerCL
elif [[ "$OSTYPE" =~ "linux" ]]; then
    kernel=$(uname -r)
    # WSL
    if [[ "$kernel" =~ "Microsoft" ]]; then
        gdbserver=JLinkGDBServerCL.exe
    else
        gdbserver=JLinkGDBServer
    fi
fi

# clean
function cleanexit ()
{
    kill $jlinkpid 2>/dev/null
    wait $jlinkpid 2>/dev/null
    rm -rf "$restartfile" "$scriptrunningfile" "$exerunningfile" "$logfile" "$pidfile"
    echo -e "\n\e[31mScript Exit\e[0m"
    exit 0
}

# run
( $gdbserver $params & echo $! >&3 ) 3>$pidfile | tee $logfile &
jlinkpid=$(<$pidfile)
touch "$exerunningfile"

# catch interrupt
trap "cleanexit" HUP INT QUIT ABRT TERM

# check restart
touch "$scriptrunningfile"
rm -f "$restartfile"
while true; do
    # check restart flag
    if [[ -f "$restartfile" ]]; then
        rm -f "$restartfile"
        echo -e "\n\e[31mRestart JLinkGDBServer!\e[0m\n"

        # kill it
        if [[ -n "$jlinkpid" ]]; then
            kill $jlinkpid 2>/dev/null
            wait $jlinkpid 2>/dev/null
            sleep 0.2
        fi

        # restart
        ( $gdbserver $params & echo $! >&3 ) 3>$pidfile | tee $logfile &
        jlinkpid=$(<$pidfile)
        touch "$exerunningfile"
    fi

    # check JLinkGDBServer exit
    if [[ -n "$jlinkpid" ]]; then
        if ! ps -p $jlinkpid >/dev/null; then
            echo -e "\n\e[31mJLinkGDBServer Exit\e[0m\n"
            jlinkpid=""
            rm -rf "$exerunningfile"
        fi
    fi

    sleep 0.2
done

