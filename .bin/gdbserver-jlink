#!/bin/bash

device="Cortex-M3"
speed="auto"
port="2331"
rtos=""
select=""

function usage ()
{
    cat <<EOF
GDB Server with SEGGER JLink
Options:
  -F|--force        Force start JLink GDB server (Kill running server)
  -R|--restart      Restart JLink GDB server
  -S|--stop         Stop JLink GDB server
  -D|--daemon       Daemon mode (must be 1st option)
  -C|--clean        Clean all temp files
  -p|--port=*       Listen port (2331)
  -d|--device=*     Device (Cortex-M3)
  -s|--speed=*      Speed kB/s (auto)
  -u|--usb=*        Specifies USB SerialNo to connect
  -i|--ip=*         Specifies IP address to connect
  -h|--help         Show this help
  --embos           Use RTOS Plugin: embOS
  --freertos        Use RTOS Plugin: FreeRTOS
  --chibios         Use RTOS Plugin: ChibiOS

Supported Devices: https://www.segger.com/jlink_supported_devices.html
EOF

    exit 0
}

# Parse argument
for i in "$@"
do
    case $i in
        -F|--force) force_startup=1 ;;
        -R|--restart) restartit=1 ;;
        -S|--stop) stopit=1 ;;
        -D|--daemon) if [[ "$i" == "$1" ]]; then daemonmode=1; shift; fi ;;
        -C|--clean) cleanit=1 ;;
        -p=*|--port=*) port="${i#*=}" ;;
        -d=*|--device=*) device="${i#*=}" ;;
        -s=*|--speed=*) speed="${i#*=}" ;;
        -u=*|--usb=*) select="-select usb=${i#*=}" ;;
        -i=*|--ip=*) select="-select ip=${i#*=}" ;;

        --embos)    rtos="-rtos GDBServer/RTOSPlugin_embOS" ;;
        --freertos) rtos="-rtos GDBServer/RTOSPlugin_FreeRTOS" ;;
        --chibios)  rtos="-rtos GDBServer/RTOSPlugin_ChibiOS" ;;

        -h|--help) usage ;;
        *) usage ;;
    esac
done

# ctrl file
fileprefix="/tmp/JLinkGDBServer-$port"
restartfile="$fileprefix-RESTART"
scriptrunningfile="$fileprefix-SCRIPT-RUNNING"
scriptexitfile="$fileprefix-SCRIPT-EXIT"
exerunningfile="$fileprefix-EXE-RUNNING"
jlinklogfile="$fileprefix-LOG-JLINK"
jlinkpidfile="$fileprefix-PID-JLINK"

# check start status
function check_jlinkgdbserver_start_status ()
{
    exerunning=0
    timeout=0
    while true; do
        if [[ "$exerunning" == "0" ]]; then
            # check JLinkGDBServer running
            if [[ -f "$exerunningfile" ]]; then
                exerunning=1
            fi
        else
            # check flag from log file
            if [[ -f "$jlinklogfile" ]]; then
                if grep -q 'Waiting for GDB connection' "$jlinklogfile"; then
                    echo "OK"
                    return 0
                fi
            fi
            # check JLinkGDBServer exit
            if [[ ! -f "$exerunningfile" ]]; then
                echo "FAIL"
                return -1
            fi
        fi

        # check timeout
        if (($timeout>30)); then
            echo "Timeout"
            return -1
        fi

        timeout=$(($timeout + 1))
        sleep 0.2
    done
}

function check_jlinkgdbserver_stop_status ()
{
    timeout=0
    while true; do
        if [[ ! -f "$scriptrunningfile" ]]; then
            echo "OK"
            return 0
        fi

        # check timeout
        if (($timeout>30)); then
            echo "Timeout"
            return -1
        fi

        timeout=$(($timeout + 1))
        sleep 0.2
    done
}

# check script whether is running
if [[ -f "$scriptrunningfile" ]]; then
    if ! ps -p $(<$scriptrunningfile) >/dev/null 2>&1; then
        rm -rf ${fileprefix}*
    fi
fi

# clean temp file
if [[ -n "$cleanit" ]]; then
    rm -rf ${fileprefix}*
    exit 0
fi

# restart
if [[ -n "$restartit" ]]; then
    if [[ -f "$scriptrunningfile" ]]; then
        echo -n "JLinkGDBServer restarting... "

        rm -rf "$exerunningfile"
        touch "$restartfile"

        check_jlinkgdbserver_start_status
        exit $?
    else
        echo "JLinkGDBServer Script is not running"
        exit -1
    fi
fi

# check running
if [[ -f "$scriptrunningfile" ]]; then
    echo -n "JLinkGDBServer Script is already running! "
    if [[ -n "$force_startup" || -n "$stopit" ]]; then
        echo -n "Killing it... "
        touch "$scriptexitfile"

        # check result
        check_jlinkgdbserver_stop_status
        if [[ "$?" == "0" ]]; then
            if [[ -n "$stopit" ]]; then
                exit 0
            fi
        else
            exit -1
        fi
    else
        echo ""
        exit -1
    fi

elif [[ -n "$stopit" ]]; then
    echo "JLinkGDBServer Script is not running"
    exit 0
fi

# daemon
if [[ -n "$daemonmode" ]]; then
    echo -n "JLinkGDBServer Script run as Daemon... "
    setsid $0 $@ >/dev/null 2>&1 &

    check_jlinkgdbserver_start_status
    exit $?
fi

# add device Cortex-CM3, jlinkGdbServer will wait chip wakeuped, and then connect
params="-device $device -speed $speed -port $port $select -if SWD -nolocalhostonly -nologtofile -halt -nosilent -vd -noir -notimeout $rtos"

# Segger Jlink GDB Server
if [[ "$OSTYPE" =~ "cygwin" ]]; then
    gdbserver=JLinkGDBServerCL
elif [[ "$OSTYPE" =~ "linux" ]]; then
    kernel=$(uname -r)
    # WSL
    if [[ "$kernel" =~ "Microsoft" ]]; then
        gdbserver=JLinkGDBServerCL.exe
    else
        gdbserver=JLinkGDBServer
    fi
fi

# clean
function cleanexit ()
{
    if [[ -n "$jlinkpid" ]]; then
        kill $jlinkpid 2>/dev/null
        wait $jlinkpid 2>/dev/null
    fi
    rm -rf ${fileprefix}*
    echo -e "\n\e[31mJLinkGDBServer Script Exit\e[0m"
    exit 0
}

# run
( $gdbserver $params & echo $! >&3 ) 3>$jlinkpidfile | tee $jlinklogfile &
jlinkpid=$(<$jlinkpidfile)
touch "$exerunningfile"

# catch interrupt
trap "cleanexit" HUP INT QUIT ABRT TERM

# check restart
echo "$$" >"$scriptrunningfile"
rm -f "$restartfile"
while true; do
    # check restart flag
    if [[ -f "$restartfile" ]]; then
        rm -f "$restartfile"
        echo -e "\n\e[31mJLinkGDBServer EXE Restart\e[0m"

        # kill it
        if [[ -n "$jlinkpid" ]]; then
            kill $jlinkpid 2>/dev/null
            wait $jlinkpid 2>/dev/null
            sleep 0.2
        fi

        # restart
        ( $gdbserver $params & echo $! >&3 ) 3>$jlinkpidfile | tee $jlinklogfile &
        jlinkpid=$(<$jlinkpidfile)
        touch "$exerunningfile"
    fi

    # check JLinkGDBServer exit
    if [[ -n "$jlinkpid" ]]; then
        if ! ps -p $jlinkpid >/dev/null; then
            echo -e "\n\e[31mJLinkGDBServer EXE Exit\e[0m"
            jlinkpid=""
            rm -rf "$exerunningfile"
        fi
    fi

    # check exit
    if [[ -f "$scriptexitfile" ]]; then
        break
    fi

    sleep 0.2
done

# exit
cleanexit

