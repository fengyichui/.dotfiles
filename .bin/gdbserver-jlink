#!/bin/bash

device="Cortex-M3"
speed="auto"
port="2331"
rtos=""
select=""

NONOTIFY_PATTERN='Connected correctly'

function usage ()
{
    cat <<EOF
GDB Server with SEGGER JLink
Options:
  -F|--force        Force start JLink GDB server (May kill running server)
  -R|--restart      Restart JLink GDB server
  -S|--stop         Stop JLink GDB server
  -D|--daemon       Daemon mode (must be 1st option)
  -X                If no server running, start new server as daemon,
                    Otherwise restart it. Same: --daemon --restart --force
  -C|--clean        Clean all temp files and Kill all running JLinkGDBServer
  -t|--retry        Retry until connection is ok
  -p|--port=*       Listen port (2331)
  -d|--device=*     Device (Cortex-M3)
  -s|--speed=*      Speed kB/s (auto)
  -u|--usb=*        Specifies USB SerialNo to connect
  -i|--ip=*         Specifies IP address to connect
  -N|--nonotify     Not notify (pattern)
  -h|--help         Show this help
  --embos           Use RTOS Plugin: embOS
  --freertos        Use RTOS Plugin: FreeRTOS
  --chibios         Use RTOS Plugin: ChibiOS

Supported Devices: https://www.segger.com/jlink_supported_devices.html
EOF

    exit 0
}

# Parse argument
for i in "$@"
do
    case $i in
        -F|--force) forceit=1 ;;
        -R|--restart) restartit=1 ;;
        -S|--stop) stopit=1 ;;
        -D|--daemon) if [[ "$i" == "$1" ]]; then daemonmode=1; shift; fi ;;
        -X)          if [[ "$i" == "$1" ]]; then daemonmode=1; forceit=1; restartit=1; shift; fi ;;
        -C|--clean) cleanit=1 ;;
        -t|--retry) retry=1 ;;
        -p=*|--port=*) port="${i#*=}" ;;
        -d=*|--device=*) device="${i#*=}" ;;
        -s=*|--speed=*) speed="${i#*=}" ;;
        -u=*|--usb=*) select="-select usb=${i#*=}" ;;
        -i=*|--ip=*) select="-select ip=${i#*=}" ;;
        -N=*|--nonotify=*) if [[ -n $nonotifypattern ]]; then nonotifypattern="$nonotifypattern\\|${i#*=}"; else nonotifypattern="${i#*=}"; fi ;;
        -N|--nonotify) nonotify=1 ;;

        --embos)    rtos="-rtos GDBServer/RTOSPlugin_embOS" ;;
        --freertos) rtos="-rtos GDBServer/RTOSPlugin_FreeRTOS" ;;
        --chibios)  rtos="-rtos GDBServer/RTOSPlugin_ChibiOS" ;;

        -h|--help) usage ;;
        *) usage ;;
    esac
done

# ctrl file
fileprefix="/tmp/JLinkGDBServer-$port"
restartfile="$fileprefix-RESTART"
scriptrunningfile="$fileprefix-SCRIPT-RUNNING"
scriptexitfile="$fileprefix-SCRIPT-EXIT"
exerunningfile="$fileprefix-EXE-RUNNING"
jlinklogfile="$fileprefix-LOG-JLINK"
jlinkpidfile="$fileprefix-PID-JLINK"
jlinkname="JLinkGDBServer@$port"

# check start status
function check_jlinkgdbserver_start_status ()
{
    exerunning=0
    timeout=0
    chkpower=0
    while true; do
        if [[ "$exerunning" == "0" ]]; then
            # check JLinkGDBServer running
            if [[ -f "$exerunningfile" ]]; then
                exerunning=1
            fi
        else
            # check flag from log file
            if [[ -f "$jlinklogfile" ]]; then
                if grep -q 'Waiting for GDB connection' "$jlinklogfile"; then
                    echo "OK"
                    return 0
                fi
                # checking power
                if [[ "$chkpower" == "0" ]]; then
                    chkpowernum="$(awk '/Checking target voltage/' "$jlinklogfile" | wc -l)"
                    if ((chkpowernum>3)); then
                        echo -n "(No Power?) "
                        chkpower=1
                    fi
                fi
            fi
            # check JLinkGDBServer exit
            if [[ ! -f "$exerunningfile" ]]; then
                # check exit reason
                if [[ -f "$jlinklogfile" ]]; then
                    if grep -q 'Failed to open listener port' "$jlinklogfile"; then
                        echo "FAIL (Can't open listener port)"
                        return 1
                    fi
                    if grep -q 'Could not connect to J-Link' "$jlinklogfile"; then
                        echo "FAIL (No J-link)"
                        return 1
                    fi
                fi
                echo "FAIL"
                return 1
            fi
        fi

        # check timeout
        if [[ "$chkpower" == "0" ]]; then
            if ((timeout>30)); then
                echo "Timeout"
                return 1
            fi
        fi

        timeout=$((timeout + 1))
        sleep 0.2
    done
}

function check_jlinkgdbserver_stop_status ()
{
    timeout=0
    while true; do
        if [[ ! -f "$scriptrunningfile" ]]; then
            echo "OK"
            return 0
        fi

        # check timeout
        if ((timeout>30)); then
            echo "Timeout"
            return 1
        fi

        timeout=$((timeout + 1))
        sleep 0.2
    done
}

function check_jlinkgdbserver_exit_code ()
{
    declare -A jlinkgdbserver_exit_codes_table
    jlinkgdbserver_exit_codes_table=(
        [0]="No error" \
        [-1]="Unknown error" \
        [-2]="Failed to open listener port" \
        [-3]="Could not connect to target" \
        [-4]="Failed to accept a connection from GDB" \
        [-5]="Failed to parse the command line options" \
        [-6]="Unknown or no device name set" \
        [-7]="Failed to connect to J-Link" \
    )
    echo ${jlinkgdbserver_exit_codes_table[$1]}
}

function check_jlinkgdbserver_pid ()
{
    echo "$(pgrep -i -f "jlinkgdbserver.* -port $port")"
}

function restart_jlinkgdbserver ()
{
    echo -n "$jlinkname restarting... "

    rm -rf "$jlinklogfile"
    rm -rf "$exerunningfile"
    touch "$restartfile"

    check_jlinkgdbserver_start_status
    return $?
}

# check script whether is running
if [[ -f "$scriptrunningfile" ]]; then
    if ! ps -p "$(<"$scriptrunningfile")" >/dev/null 2>&1; then
        rm -rf ${fileprefix}*
    fi
fi

# clean temp file and kill all running JLinkGDBServer
if [[ -n "$cleanit" ]]; then
    rm -rf ${fileprefix}*
    pkill -9 -e -i JLinkGDBServer
    exit 0
fi

# restart
if [[ -n "$restartit" ]]; then
    if [[ -f "$scriptrunningfile" ]]; then
        while true; do
            restart_jlinkgdbserver
            [[ $? == 0 ]] && exit 0
            [[ -z "$retry" ]] && exit 1
        done
        exit 1
    else
        echo "$jlinkname Script is not running"
        if [[ -z "$forceit" ]]; then
            exit 1
        fi
    fi
fi

# check running
if [[ -f "$scriptrunningfile" ]]; then
    echo -n "$jlinkname Script is already running! "
    if [[ -n "$forceit" || -n "$stopit" ]]; then
        echo -n "Killing it... "
        touch "$scriptexitfile"

        # check result
        check_jlinkgdbserver_stop_status
        if [[ "$?" == "0" ]]; then
            if [[ -n "$stopit" ]]; then
                exit 0
            fi
        else
            exit 1
        fi
    else
        echo ""
        exit 1
    fi

elif [[ -n "$stopit" ]]; then
    echo "$jlinkname Script is not running"
    exit 0
fi

# daemon
if [[ -n "$daemonmode" ]]; then
    echo -n "$jlinkname Script run as Daemon... "
    daemon $0 "$@"

    check_jlinkgdbserver_start_status
    [[ $? == 0 ]] && exit 0
    [[ -z "$retry" ]] && exit 1

    while true; do
        restart_jlinkgdbserver
         [[ $? == 0 ]] && exit 0
    done
    exit 1
fi

# add device Cortex-CM3, jlinkGdbServer will wait chip wakeuped, and then connect
params="-device $device -speed $speed -port $port $select -if SWD -nolocalhostonly -nologtofile -halt -nosilent -vd -noir -notimeout $rtos"

# Segger Jlink GDB Server
if [[ "$OSTYPE" =~ "cygwin" ]]; then
    gdbserver=JLinkGDBServerCL
elif [[ "$OSTYPE" =~ "linux" ]]; then
    # WSL
    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        gdbserver=JLinkGDBServerCL.exe
    else
        gdbserver=JLinkGDBServer
    fi
fi

# kill jlinkgdbserver
function kill_jlinkgdbserver ()
{
    # kill it
    if [[ -n "$jlinkpid" ]]; then
        kill $jlinkpid 2>/dev/null
        wait $jlinkpid 2>/dev/null
    fi

    # make sure killed
    jlinkpid="$(check_jlinkgdbserver_pid)"
    if [[ -n "$jlinkpid" ]]; then
        echo -e "\n\e[31m$jlinkname can't be killed, Retry!\e[0m"
        kill -9 $jlinkpid 2>/dev/null
        wait $jlinkpid 2>/dev/null
        sleep 0.2

        # check
        jlinkpid="$(check_jlinkgdbserver_pid)"
        if [[ -n "$jlinkpid" ]]; then
            echo -e "\n\e[31m$jlinkname can't be killed!\e[0m"
        fi
    fi
}

# clean
function cleanexit ()
{
    kill_jlinkgdbserver
    rm -rf ${fileprefix}*
    echo -e "\n\e[31m$jlinkname Script Exit\e[0m"
    exit 0
}

# run
( $gdbserver $params & echo $! >&3 ) 3>$jlinkpidfile 2>&1 | tee $jlinklogfile &
jlinkpid=$(<$jlinkpidfile)
lastloglines=0
touch "$exerunningfile"

# catch interrupt
trap "cleanexit" HUP INT QUIT ABRT TERM

# check restart
echo "$$" >"$scriptrunningfile"
rm -f "$restartfile"
while true; do
    # check restart flag
    if [[ -f "$restartfile" ]]; then
        rm -f "$restartfile"
        echo -e "\n\e[31m$jlinkname EXE Restart\e[0m"

        # kill
        kill_jlinkgdbserver
        sleep 0.2

        # restart
        ( $gdbserver $params & echo $! >&3 ) 3>$jlinkpidfile 2>&1 | tee $jlinklogfile &
        jlinkpid=$(<$jlinkpidfile)
        lastloglines=0
        touch "$exerunningfile"
    fi

    # check JLinkGDBServer exit
    if [[ -n "$jlinkpid" ]]; then
        if ps -p $jlinkpid >/dev/null; then
            if [[ -z "$nonotify" && -f "$jlinklogfile" ]]; then
                curloglines="$(wc -l <"$jlinklogfile")"
                if [[ "$curloglines" != "$lastloglines" ]]; then
                    logerrmsg="$(tail -n +$((lastloglines+1)) "$jlinklogfile" | grep -i "fail\|error")"
                    if [[ -n "$logerrmsg" ]]; then
                        logerrmsg=$(grep -v -i "$NONOTIFY_PATTERN" <<<"$logerrmsg")
                        if [[ -n "$nonotifypattern" ]]; then
                            logerrmsg=$(grep -v -i "$nonotifypattern" <<<"$logerrmsg")
                        fi
                        if [[ -n "$logerrmsg" ]]; then
                            notifu.exe '/t' warn '/p' "$jlinkname" '/m' "$logerrmsg" '/q' '/d' '8000' &
                        fi
                    fi
                    lastloglines="$curloglines"
                fi
            fi
        else
            echo -e "\n\e[31m$jlinkname EXE Exit\e[0m"
            jlinkpid=""
            rm -rf "$exerunningfile"
        fi
    fi

    # check exit
    if [[ -f "$scriptexitfile" ]]; then
        break
    fi

    sleep 0.2
done

# exit
cleanexit

# wait all jobs exit
wait

