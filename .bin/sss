#!/bin/bash

######################################################################
# @file sss
# @brief auto sslocal
# @date 2017/2/28 22:57:47
# @author liqiang
#
# 127.0.0.1:1080 will be as the proxy server
#
# In chrome, use SwitchyOmega plugin to proxy (socks5)
#
# About libQtShadowsocks:
#   GITHUB:
#       https://github.com/shadowsocks/libQtShadowsocks/releases
#   Dependencies
#       - Qt >= 5.5 (qt5-qtbase-devel and cmake in Fedora, qtbase5-dev and cmake in Debian/Ubuntu, libQt5Core-devel in Cygwin)
#       - Botan-1.10 (botan-devel in Fedora, libbotan1.10-dev in Debian/Ubuntu, libbotan1.10-devel in Cygwin)
#       - Or Botan-2 >= 2.3.0
#       - CMake >= 3.1
#       - A C++ Compiler that supports C++14 features (i.e. GCC >= 5.0)
#   Build:
#       $ mkdir build && cd build
#       $ cmake .. -DCMAKE_INSTALL_PREFIX=/usr
#       $ make -j4
#       $ sudo make install
#
# @addtogroup 
# @ingroup 
# @details 
#
# @{
######################################################################

#
# inside proxy table
#
# iShadow: isx.yt == dwz.pm/x
# freess:  f55.fun == 55r.run
#
# name      ss8      iShadow  freess   freess
# index     0-2      10-18    20-22    30-35
urls=(     'ss8.pm' 'isx.yt' 'ssx.re' 'f55.fun')
addrmodes=('re_img' 're_img' 're_img' 're_base64_img')
address=( \
    '\"images/server03-[^\"]+\"' \
    '\"images/server02-[^\"]+\"' \
    '\"images/server01-[^\"]+\"' \
    'x' 'x' 'x' 'x' 'x' 'x' 'x' \
    \
    '\"img/qr/usa-[^\"]+\"' \
    '\"img/qr/usb-[^\"]+\"' \
    '\"img/qr/usc-[^\"]+\"' \
    '\"img/qr/jpa-[^\"]+\"' \
    '\"img/qr/jpb-[^\"]+\"' \
    '\"img/qr/jpc-[^\"]+\"' \
    '\"img/qr/sga-[^\"]+\"' \
    '\"img/qr/sgb-[^\"]+\"' \
    '\"img/qr/sgc-[^\"]+\"' \
    'x' \
    \
    '\"img/portfolio/ss1_[^\"]+\"' \
    '\"img/portfolio/ss2_[^\"]+\"' \
    '\"img/portfolio/ss3_[^\"]+\"' \
    'x' 'x' 'x' 'x' 'x' 'x' 'x' \
    \
    'id=\"usa\" href=\"[^\"]+\"' \
    'id=\"usb\" href=\"[^\"]+\"' \
    'id=\"usc\" href=\"[^\"]+\"' \
    'id=\"usd\" href=\"[^\"]+\"' \
    'id=\"use\" href=\"[^\"]+\"' \
    'id=\"usf\" href=\"[^\"]+\"' \
    'x' 'x' 'x' 'x' \
    )

# const
mode_inside_qr_net_path=0
mode_usr_qr_net_path=1
mode_usr_qr_local_path=2
mode_usr_server_password=3 #like: rc4-md5:52918214@138.68.61.42:23456 (encrypt_method:password@ip_address:port)

# variable
copy_info=0
inside_qr_index=0
qr_net_path=''
if [[ -z "$TMPDIR" ]]; then
    qr_local_path='/tmp/ssqr.png'
else
    qr_local_path="$TMPDIR/ssqr.png"
fi
server_info='rc4-md5:52918214@138.68.61.42:23456'
mode=$mode_inside_qr_net_path

noopt=$1

# Parse argument
for i in "$@"
do
    case $i in
        -n=*|--qr-net=*)
            qr_net_path="${i#*=}"
            mode=$mode_usr_qr_net_path
            shift
            ;;
        -l=*|--qr-local=*)
            qr_local_path="${i#*=}"
            mode=$mode_usr_qr_local_path
            shift
            ;;
        -s=*|--server=*)
            server_info="${i#*=}"
            mode=$mode_usr_server_password
            shift
            ;;
        -p|--proxy)
            proxy=1
            shift
            ;;
        -c|--copy)
            copy_info=1
            shift
            ;;
        -t|--test)
            test_server=1
            shift
            ;;
        *)
            if [[ "$(awk '/^-[0-9]+$/' <<< $i)" == "$i" ]]; then
                inside_qr_index="${i#*-}"
                mode=$mode_inside_qr_net_path
                shift
            else
                echo "Automatic proxy with shadowsocks."
                echo "Usage:"
                echo "  -NN                inside proxy table index"
                echo "  -n|--qr-net        network QR picture address"
                echo "  -l|--qr-local      local QR picture path"
                echo "  -s|--server        encrypt_method:password@ip_addr:port"
                echo "  -c|--copy          copy ss raw info to clipboard"
                echo "  -t|--test          test all inside proxy server"
                echo "  -h|--help          show this help"
                echo "Example:"
                echo "  -12"
                echo "  -n='http://ss8.pm/images/server01.png'"
                echo "  -l='./qr.png'"
                echo "  -s='rc4-md5:52918214@138.68.61.42:23456'"
                echo "Default is used inside proxy table index=0(-0) to proxy."
                echo "by liqiang"
                exit 0
            fi
            ;;
    esac
done

finalurl ()
{
    curl --insecure --progress-bar -A foxfire -w %{url_effective} -I -L "$1" -o /dev/null
}

free_ss_list ()
{
    curl --insecure --progress-bar -A foxfire -L https://raw.githubusercontent.com/dxxzst/Free-SS-SSR/master/README.md > /tmp/free_ss_list
    cat /tmp/free_ss_list | awk '/最新更新日期/' > /tmp/sss_list
    cat /tmp/free_ss_list | awk '/### SS账号/,/### SSR账号/' | awk -v FS='|' '/^\|[0-9]/{print "sss -s=\""$4":"$5"@"$2":"$3"\""}' >> /tmp/sss_list
    cat /tmp/sss_list
}

# list
if [[ -z "$noopt" ]]; then
    echo "List free ss:"
    free_ss_list
    exit
fi

# test server
if [[ -n "$test_server" ]]; then
    i=0
    for s in ${urls[@]}; do
        ping -c 1 -W 2 "$s" > /dev/null
        if [[ "$?" == "0" ]]; then
            echo -e "-${i}x  ${s}\tpass"
        else
            echo -e "-${i}x  ${s}\tfail"
        fi
        i=$(($i+1))
    done
    exit
fi

# Get inside QR network path
if [[ $mode -eq $mode_inside_qr_net_path ]]; then
    if [[ "$inside_qr_index" -ge "${#address[*]}" ]]; then
        echo -e "\e[31msss: invalid index!\e[0m"
        exit 1
    fi

    qr_net_path=${address[$inside_qr_index]}

    if [[ $qr_net_path == 'x' ]]; then
        echo -e "\e[31msss: invalid index!\e[0m"
        exit 1
    fi

    # net and mode
    inside_url_index=$(($inside_qr_index/10))
    net=${urls[$inside_url_index]}
    parse_mode=${addrmodes[$inside_url_index]}

    # freess
    if [[ "$parse_mode" == "re_base64_img" ]]; then
        echo "curl '${net}' ..."
        qr=$(curl --insecure --progress-bar -A foxfire -L ${net} |
             awk "{if(match(\$0, \"$qr_net_path\"))print substr(\$0, RSTART+37, RLENGTH-38);}")
        if [[ -z $qr ]]; then
            echo -e "\e[31msss: can't curl valid QR image!\e[0m"
            exit 1
        fi
        echo $qr | base64 -d >$qr_local_path
        mode=$mode_usr_qr_local_path
        echo ""

    # ss8 and isx
    else
        echo "curl '${net}' ..."
        net=$(finalurl "$net")
        qr=$(curl --insecure --progress-bar -A foxfire -L ${net} |
             awk "{if(match(\$0, \"$qr_net_path\"))print substr(\$0, RSTART+1, RLENGTH-2);}")
        if [[ -z $qr ]]; then
            echo -e "\e[31msss: can't curl valid QR image!\e[0m"
            exit 1
        fi
        qr_net_path="$net$qr"
        echo ""
    fi
fi

# Get network QR
if [[ $mode -eq $mode_usr_qr_net_path || $mode -eq $mode_inside_qr_net_path ]]; then
    echo "wget '${qr_net_path}' ..."
    wget --no-check-certificate -U mozilla $qr_net_path -O $qr_local_path
    if [ $? != 0 ]; then
        echo -e "\e[31msss: wget fail!\e[0m"
        exit 1
    fi
fi

# Parse server info
if [[ $mode -eq $mode_usr_qr_net_path || $mode -eq $mode_inside_qr_net_path || $mode -eq $mode_usr_qr_local_path ]]; then
    # like: rc4-md5:52918214@138.68.61.42:23456
    server_info_raw=$(zbarimg -q --raw $qr_local_path)
    server_info=$(echo "$server_info_raw" | sed 's#^ss://##' | base64 -d)
fi

# Check server params
if [[ -z $server_info ]]; then
    echo -e "\e[31msss: invalid server information!\e[0m"
    exit 1
fi

# like: -m rc4-md5 -k 52918214 -s 138.68.61.42 -p 23456
serverparam=$(echo $server_info | sed 's/^/-m /; s/:/ -k /; s/@/ -s /; s/:/ -p /')
localparam='-b 127.0.0.1 -l 1080'

# show
echo -e "\e[32mServer: $server_info\e[0m"
echo -e "\e[32mProxy: 127.0.0.1:1080\e[0m"

# copy to clipboard
if [[ $copy_info -eq 1 ]]; then
    echo "$server_info_raw" | clipcopy
    exit 0
fi

# bank line
echo ""

# proxy
if [[ -n "$proxy" ]]; then
    proxy &
    proxy_job=$!
fi

# catch interrupt
trap 'echo -e "\e[31minterrupt\e[0m"' HUP INT QUIT ABRT TERM

# ss
if command -v shadowsocks-libqss > /dev/null 2>&1; then
    shadowsocks-libqss -t 300 $localparam $serverparam 2>&1 | awk '!/INFO: TCP connection timeout./'
elif command -v shadowsocks-libev > /dev/null 2>&1; then
    shadowsocks-libev -t 300 $localparam $serverparam
elif command -v sslocal > /dev/null 2>&1; then
    sslocal -t 300 $localparam $serverparam
else
    echo -e "\e[31mRequest Shadowsocks: shadowsocks-libqss or shadowsocks-libev or sslocal\e[0m"
fi

# check
if [[ -n "$proxy_job" ]]; then
    kill $proxy_job 2>/dev/null
    wait $proxy_job 2>/dev/null
fi

# sslocal only support socks5
# request:
#   $ pip3 install shadowsocks
#   $ apt-cyg install openssl-devel
#sslocal -v -t 600 $localparam $serverparam

# @} #

