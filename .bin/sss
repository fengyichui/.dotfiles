#!/bin/bash

######################################################################
# @file sss
# @brief auto sslocal
# @date 2017/2/28 22:57:47
# @author liqiang
#
# 127.0.0.1:1080 will be as the proxy server
#
# In chrome, use SwitchyOmega plugin to proxy (socks5)
#
# About libQtShadowsocks:
#   GITHUB:
#       https://github.com/shadowsocks/libQtShadowsocks/releases
#   Dependencies
#       - Qt >= 5.5 (qt5-qtbase-devel and cmake in Fedora, qtbase5-dev and cmake in Debian/Ubuntu, libQt5Core-devel in Cygwin)
#       - Botan-1.10 (botan-devel in Fedora, libbotan1.10-dev in Debian/Ubuntu, libbotan1.10-devel in Cygwin)
#       - Or Botan-2 >= 2.3.0
#       - CMake >= 3.1
#       - A C++ Compiler that supports C++14 features (i.e. GCC >= 5.0)
#   Build:
#       $ mkdir build && cd build
#       $ cmake .. -DCMAKE_INSTALL_PREFIX=/usr
#       $ make -j4
#       $ sudo make install
#
# @addtogroup 
# @ingroup 
# @details 
#
# @{
######################################################################

# inside proxy table
x='x'
ss8='ss8.pm'
isx='isx.yt' # dwz.pm/x
freess='f55.fun'
fvs='jn9.org/img/'
res=( \
    '\"images/server03-[^\"]+\"' \
    '\"images/server02-[^\"]+\"' \
    '\"images/server01-[^\"]+\"' \
    $x $x $x $x $x $x $x \
    \
    '\"img/qr/usa-[^\"]+\"' \
    '\"img/qr/usb-[^\"]+\"' \
    '\"img/qr/usc-[^\"]+\"' \
    '\"img/qr/jpa-[^\"]+\"' \
    '\"img/qr/jpb-[^\"]+\"' \
    '\"img/qr/jpc-[^\"]+\"' \
    '\"img/qr/sga-[^\"]+\"' \
    '\"img/qr/sgb-[^\"]+\"' \
    '\"img/qr/sgc-[^\"]+\"' \
    $x \
    \
    'id=\"usa\" href=\"[^\"]+\"' \
    'id=\"usb\" href=\"[^\"]+\"' \
    'id=\"usc\" href=\"[^\"]+\"' \
    'id=\"usd\" href=\"[^\"]+\"' \
    'id=\"use\" href=\"[^\"]+\"' \
    'id=\"usf\" href=\"[^\"]+\"' \
    $x $x $x $x \
    \
    ${fvs}qr01.png ${fvs}qr02.png ${fvs}qr03.png $x $x $x $x $x $x $x \
    )

# const
mode_inside_qr_net_path=0
mode_usr_qr_net_path=1
mode_usr_qr_local_path=2
mode_usr_server_password=3 #like: rc4-md5:52918214@138.68.61.42:23456 (encrypt_method:password@ip_address:port)

# variable
global_proxy=0
inside_qr_index=0
qr_net_path=''
qr_local_path='/tmp/ssqr.png'
server_info='rc4-md5:52918214@138.68.61.42:23456'
mode=$mode_inside_qr_net_path
proxy_mode='' # HTTP or SOCKS5

# Parse argument
for i in "$@"
do
    case $i in
        -i=*|--inside-index=*)
            inside_qr_index="${i#*=}"
            mode=$mode_inside_qr_net_path
            shift # past argument=value
            ;;
        -n=*|--qr-net=*)
            qr_net_path="${i#*=}"
            mode=$mode_usr_qr_net_path
            shift # past argument=value
            ;;
        -l=*|--qr-local=*)
            qr_local_path="${i#*=}"
            mode=$mode_usr_qr_local_path
            shift # past argument=value
            ;;
        -s=*|--server=*)
            server_info="${i#*=}"
            mode=$mode_usr_server_password
            shift # past argument=value
            ;;
        -g|--global)
            global_proxy=1
            proxy_mode='--http-proxy' # window system proxy only support http-proxy
            shift # past argument with no value
            ;;
        -5|--socks5)
            proxy_mode=''
            shift # past argument with no value
            ;;
        -0|--http)
            proxy_mode='--http-proxy'
            shift # past argument with no value
            ;;
        -h|--help)
            echo "Automatic proxy with shadowsocks."
            echo "Usage:"
            echo "  -i|--inside-index  inside proxy table index"
            echo "  -n|--qr-net        network QR picture address"
            echo "  -l|--qr-local      local QR picture path"
            echo "  -s|--server        encrypt_method:password@ip_addr:port"
            echo "  -g|--global        use global proxy"
            echo "  -5|--socks5        use socks5 proxy mode"
            echo "  -0|--http          use http proxy mode"
            echo "  -h|--help          show this help"
            echo "Example:"
            echo "  -i=1"
            echo "  -n='http://ss8.pm/images/server01.png'"
            echo "  -l='./qr.png'"
            echo "  -s='rc4-md5:52918214@138.68.61.42:23456'"
            echo "Default is used inside proxy table index=0 to proxy."
            echo "by liqiang"
            exit 0
            ;;
        *)
            # unknown option
        ;;
    esac
done

# Get inside QR network path
if [[ $mode -eq $mode_inside_qr_net_path ]]; then
    if [[ "$inside_qr_index" -ge "${#res[*]}" ]]; then
        echo -e "\e[31msss: invalid index!\e[0m"
        exit 1
    fi

    qr_net_path=${res[$inside_qr_index]}

    if [[ $qr_net_path == $x ]]; then
        echo -e "\e[31msss: invalid index!\e[0m"
        exit 1
    fi

    if [[ $inside_qr_index -lt 10 ]]; then
        net=$ss8
        parse_mode=0
    elif [[ $inside_qr_index -lt 20 ]]; then
        net=$isx
        parse_mode=0
    elif [[ $inside_qr_index -lt 30 ]]; then
        net=$freess
        parse_mode=1
    fi

    # ss8 and isx
    if [[ $parse_mode -eq 0 ]]; then
        echo "curl '${net}' ..."
        qr=$(curl --insecure --progress-bar -A foxfire -L ${net} |
             awk "{if(match(\$0, \"$qr_net_path\"))print substr(\$0, RSTART+1, RLENGTH-2);}")
        if [[ -z $qr ]]; then
            echo -e "\e[31msss: can't curl valid QR image!\e[0m"
            exit 1
        fi
        qr_net_path="$net/$qr"
        echo ""

    # freess
    elif [[ $parse_mode -eq 1 ]]; then
        echo "curl '${net}' ..."
        qr=$(curl --insecure --progress-bar -A foxfire -L ${net} |
             awk "{if(match(\$0, \"$qr_net_path\"))print substr(\$0, RSTART+37, RLENGTH-38);}")
        if [[ -z $qr ]]; then
            echo -e "\e[31msss: can't curl valid QR image!\e[0m"
            exit 1
        fi
        echo $qr | base64 -d >$qr_local_path
        mode=$mode_usr_qr_local_path
        echo ""
    fi
fi

# Get network QR
if [[ $mode -eq $mode_usr_qr_net_path || $mode -eq $mode_inside_qr_net_path ]]; then
    echo "wget '${qr_net_path}' ..."
    wget --no-check-certificate -U mozilla $qr_net_path -O $qr_local_path
    if [ $? != 0 ]; then
        echo -e "\e[31msss: wget fail!\e[0m"
        exit 1
    fi
fi

# Parse server info
if [[ $mode -eq $mode_usr_qr_net_path || $mode -eq $mode_inside_qr_net_path || $mode -eq $mode_usr_qr_local_path ]]; then
    # like: rc4-md5:52918214@138.68.61.42:23456
    server_info=$(zbarimg -q --raw $qr_local_path | sed 's#^ss://##' | base64 -d)
fi

# Check server params
if [[ -z $server_info ]]; then
    echo -e "\e[31msss: invalid server information!\e[0m"
    exit 1
fi

# like: -m rc4-md5 -k 52918214 -s 138.68.61.42 -p 23456
serverparam=$(echo $server_info | sed 's/^/-m /; s/:/ -k /; s/@/ -s /; s/:/ -p /')
localparam='-b 127.0.0.1 -l 1080'

# show
echo -e "\e[32mServer: $server_info\e[0m"
echo -e "\e[32mProxy: 127.0.0.1:1080\e[0m"

if [ $global_proxy -eq 1 ]; then
    # open system proxy
    echo -e "\e[32mSystem proxy running\e[0m"
    sysproxy global 127.0.0.1:1080
fi

# bank line
echo ""

# catch interrupt
trap 'echo -e "\e[31minterrupt\e[0m"' HUP INT QUIT ABRT TERM

# ss (FIXME: global proxy must use old version)
if [ $global_proxy -eq 1 ]; then
    shadowsocks-libqss_v1.10.0 -t 600 $proxy_mode $localparam $serverparam
else
    shadowsocks-libqss -t 600 $proxy_mode $localparam $serverparam
fi

# sslocal only support socks5
# request:
#   $ pip3 install shadowsocks
#   $ apt-cyg install openssl-devel
#sslocal -v -t 600 $localparam $serverparam

if [ $global_proxy -eq 1 ]; then
    # close system proxy
    sysproxy off
fi

# @} #

