#!/bin/bash
######################################################################
# @file dl
# @brief 
# @date Thu, Dec 20, 2018  5:34:20 PM
# @author liqiang
######################################################################

dir="$HOME/downloads"
session="aria2.session"
configsys="$HOME/.config/aria2/aria2.conf"
configtracker="$HOME/.aria2tracker.conf"
uilocal="$HOME/github/AriaNg/index.html"
uiurl="http://ariang.mayswind.net/latest"
trackerurl="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt"
inputfile_cfg=""
torrent_cfg=""
misc_cfg=""
dlthing=""

function run_tracker_update ()
{
    list=$(wget -O- "$trackerurl" | awk NF | sed ":a;N;s/\\n/,/g;ta")
    cp -f "$configsys" "$configtracker"
    echo "bt-tracker=$list" >>"$configtracker"
    echo "$configtracker: bt-tracker=$list"
}

# $1 = magnet_url
function magnet_hash()
{
    hash=$(sed 's/^\s*magnet:?xt=urn:btih:\([^&]\+\).*$/\1/' <<< "$1")
    [[ "$hash" != "$1" ]] && echo $(tr 'A-Z' 'a-z' <<< $hash)
}

# $1 = magnet_url
function magnet_displayname()
{
    displayname=$(sed 's/^\s*magnet:?xt=urn:btih:.\+&dn=\([^&]\+\).*$/\1/' <<< "$1")
    [[ "$displayname" != "$1" ]] && echo -e $(sed 's/%/\\x/g' <<< "$displayname")
}

# $1 = *.torrent
function torrent_name ()
{
    dl -ls "$1" | awk '/^Name:/{print $2}'
}

# $1 = dir
# $2 = magnet_url
function humanize_torrent_file ()
{
    mhash=$(magnet_hash "$2")
    [[ -z "$mhash" ]] && exit 1
    [[ -f "$1/$mhash.torrent" ]] || exit 1
    mname=$(magnet_displayname "$2")
    [[ -z "$mname" ]] && mname=$(torrent_name "$1/$mhash.torrent")
    if [[ -z "$mname" ]]; then
        echo "$1/$mhash.torrent"
        exit 1
    else
        cp "$1/$mhash.torrent" "$1/$mname.torrent"
        echo "$1/$mname.torrent"
    fi
}

function usage ()
{
    echo "Faster downloader (aria2)"
    echo "Usage: dl [option] [url/file]"
    echo "Options:"
    echo "  -i          Ignore unfinished tasks"
    echo "  -ui         Show ui"
    echo "  -t          Update BT tracker"
    echo "  -p          Priority download header"
    echo "  -m          Just download torrent file"
    echo "  -ls         List torrent included files"
    echo "  -ls=1,3-9   Select torrent included files to download (List by -ls)"
    echo "  -d=<dir>    Set download directory"
    echo "  -NUM        Set number of max connection per server. default 16 in aria2.conf"
    echo "  -h          Show this help and exit"
    echo "  --help      Show aria2c help"
    echo "  --xxx       As aria2c option"
    echo "by liqiang (2018/12/20)"
    exit 0
}

# Parse argument
for i in "$@"
do
    case $i in
        -i) ignore_unfinished=1; shift ;;
        -ui) ui=1; shift ;;
        -t) tracker_update=1; shift ;;
        -p) misc_cfg="$misc_cfg --bt-prioritize-piece=head"; shift ;;
        -m) misc_cfg="$misc_cfg --enable-rpc=false --bt-metadata-only=true --bt-save-metadata=true --bt-load-saved-metadata=false"; rename_torrent=1; norpc=1; shift ;;
        -ls) list_torrent=1; shift ;;
        -ls=*) torrent_cfg="$torrent_cfg --select-file=${i#*=}"; shift ;;
        -d=*) dir="${i#*=}"; shift ;;
        --*) misc_cfg="$misc_cfg $i"; shift ;;
        -h) usage ;;

        *)
            if [[ "$(awk '/^-[0-9]+$/' <<< $i)" == "$i" ]]; then
                misc_cfg="$misc_cfg --max-connection-per-server=${i#*-}"
                shift
            else
                dlthing="$*"
                break
            fi
            ;;
    esac
done

# ui
if [[ -n "$ui" ]]; then
    if [[ -f "$uilocal" ]]; then
        open "$uilocal"
    else
        open "$uiurl"
    fi
    if [[ $(pgrep aria2c) ]] ; then
        exit
    fi
fi

# tracker
if [[ -n "$tracker_update" ]]; then
    run_tracker_update
    exit
fi

# list torrent
if [[ -n "$list_torrent" ]]; then
    aria2c --show-files "$dlthing"
    exit
fi

# Check
if [[ -z "$norpc" ]]; then
    if [[ $(pgrep aria2c) ]] ; then
        read -n1 -r -p "Aria2c is running, use it? [yN] " answer
        [[ -n "$answer" ]] && echo #newline
        if [[ "$answer" != "N" ]]; then
            if [[ -n "$dlthing" ]]; then
                curl http://127.0.0.1:6800/jsonrpc \
                    -H "Content-Type: application/json" \
                    -H "Accept: application/json" \
                    --data '{"jsonrpc":"2.0","id":1,"method":"aria2.addUri","params":["token:fyc", ["'$dlthing'"]]}'
                echo
            fi
            exit
        fi
    fi
fi

# dir
if [[ ! -d $dir ]]; then
    mkdir -p "$dir"
fi

# config
if [[ -f $configtracker ]]; then
    sys_time_s=$(date +%s) 
    modify_time_s=$(stat -c %Y $configtracker)
    diff_day=$(( ($sys_time_s - $modify_time_s) / 86400 ))
    echo "BT tracker updated $diff_day days ago"
    if [[ $diff_day -ge 7 ]]; then
        read -n1 -r -p "BT tracker file is too old, update? [yN] " answer
        [[ -n "$answer" ]] && echo #newline
        if [[ "$answer" != "N" ]]; then
            run_tracker_update
        fi
    fi
else
    read -n1 -r -p "BT tracker file is not exist, update? [yN] " answer
    [[ -n "$answer" ]] && echo #newline
    if [[ "$answer" != "N" ]]; then
        run_tracker_update
    fi
fi
if [[ -f $configtracker ]]; then
    misc_cfg="$misc_cfg --conf-path='$configtracker'"
fi

# resume ?
save_session="$dir/$session"
if [[ -s $save_session && -n "$dlthing" ]]; then
    echo "$save_session:"
    echo "===================="
    cat "$save_session"
    echo "===================="
    echo ""
    read -n1 -r -p "There are unfinished tasks, resume? [yN] " answer
    [[ -n "$answer" ]] && echo #newline
    if [[ "$answer" != "N" ]]; then
        echo -e "\e[32mPlease use UI to add this task: $dlthing\e[0m"
        echo -e "\e[32mNow resume unfinished tasks!\e[0m"
        dlthing=""
    fi
fi

# input file
if [[ -z "$dlthing" ]]; then
    if [[ -s $save_session && -z "$ignore_unfinished" ]]; then
        inputfile_cfg="--input-file='$save_session'"
    fi
elif [[ -f "$dlthing" ]]; then
    dlthing=$(realpath $dlthing)
    if [[ "$dlthing" != *.torrent ]]; then
        inputfile_cfg="--input-file='$dlthing'"
        dlthing=""
    fi
fi

# select torrent files
if [[ -z "$torrent_cfg" && "$dlthing" == *.torrent ]]; then
    dl -ls "$dlthing"
    read -r -p "Select files index (eg 1,3-9): " answer
    if [[ -n "$answer" ]]; then
        misc_cfg="$misc_cfg --select-file=$answer"
    fi
fi

# create command
cmd="aria2c --dir='$dir' --save-session='$save_session' $misc_cfg $torrent_cfg"
if [[ -z "$dlthing" ]]; then
    cmd="$cmd $inputfile_cfg"
else
    cmd="$cmd '$dlthing'"
fi

# execute
echo "####################"
echo "$cmd" | sed -e 's/ \+$//g' -e 's/ \+/\n/g'
echo "####################"
eval "$cmd"

# rename downlaod torrent file
if [[ -n "$rename_torrent" ]]; then
    file=$(humanize_torrent_file "$dir" "$dlthing")
    [[ -z "$file" ]] && exit
    echo "Copy metadata as $file"
fi
