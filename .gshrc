#!/bin/bash

#
# General Shell Configuration
#

#####################################
#               Alias               #
#####################################

# ls
alias ls='ls --color=auto --group-directories-first' # classify files in colour
alias l='ls -l --time-style=long-iso -h'             # long list file (--time-style=long-iso in GNU-coreutils)
alias ll='ls -l --time-style=long-iso -A'            # long list all file

# grep file
alias grep='grep -i -I --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'  # show differences in color
alias grepc="find -type f | awk -v IGNORECASE=1 'gsub(/ /, \"\\\\ \"){}; /.*\.[chs](pp)?$/;' | xargs grep -nir -I --color=auto"

# ff and gg
alias gg-chinese="grep -P '[\p{Han}]'"
alias ff-inc="ff -d /usr/include -d /usr/local/include"
alias gg-inc="gg -d /usr/include -d /usr/local/include"
alias ff-py3="ff -d /usr/lib/python3*"
alias gg-py3="gg -d /usr/lib/python3*"

# dumpbin with windows
alias dumpbin-machine='dumpbin_func machine'
alias dumpbin-dependents='dumpbin_func dependents'
alias dumpbin-exports='dumpbin_func exports'

# cp
alias cpx='rsync --info=progress2'

# cd to git root dir
alias cdg='git_root_dir=$(git rev-parse --show-toplevel) && [[ $git_root_dir ]] && cd $git_root_dir'
alias cdr='cd $(PWD);'

# vim stdin
alias vim-='vim -c "silent file stdin | set nomodified" -'

# diff
alias diff='diff --color=auto'
alias diffg='git diff --no-index'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# gbk2utf8
alias gbk2utf8='iconv -f GBK -t UTF8'

# web
#alias dict="webx 'http://dict.youdao.com/search?q='"
#alias dict="webx 'http://cn.bing.com/dict/search?q='"
alias dict="webx 'http://dict.cn/'"
alias wiki="webx 'http://en.wikipedia.org/wiki/'"
alias rfc="webx 'https://tools.ietf.org/rfc/rfc'"

# arm gdb with tmux,gdb.dashboard
alias armgdb="new -n -m exec tmuxinator start armgdb"
alias armgdb2="new -n -m exec tmuxinator start armgdb -n armgdb2"
alias armgdb3="new -n -m exec tmuxinator start armgdb -n armgdb3"

# gdb for hs662x
alias arm-none-eabi-gdb-hs662x='arm-none-eabi-gdb -ex "source ~/.dotfiles/.gdb/hs662x.gdb.py"'

# curl
alias whereami="curl https://freegeoip.app/xml/"
alias weather="curl wttr.in"

# http file server
alias www="python3 -m http.server 8000"

# check zsh startup time
alias zsh-startup-time="zsh -i -xv -c exit 2>&1 | ts -i "%.s" > zsh_startup.log"

# remove all empty directorys
alias rm-all-empty-dirs="find . -type d -empty -delete"

# file system scan
alias fscan='ncdu'

# remove repeat line (not sort) (awk '!x[$0]++' filename)
alias rm-repeat-line="awk '!x[\$0]++'"

# trans
alias trans='translate'

# like man
alias men='tldr'

# markdown
alias mk='typora.exe'

# baidu yun pan
if [[ "$OSTYPE" == "cygwin" ]]; then
alias by='winpty BaiduPCS-Go.exe'
else
alias by='BaiduPCS-Go'
fi

#####################################
#             Function              #
#####################################

# cdf for ~/.f complletions
cdf ()
{
    cd $@
}

# keil
keil ()
{
    file="${@: -1}"
    if [[ -n "$file" ]]; then
        if [[ -f "$file" ]]; then
            if [[ -n "$WSL_DISTRO_NAME" ]]; then
                daemon UV4.exe $@
            else
                HOME="$(cygpath -D -m)/../" daemon UV4 $@
            fi
        else
            echo "No such project: $file"
        fi
    else
        if [[ -n "$WSL_DISTRO_NAME" ]]; then
            daemon UV4.exe
        else
            HOME="$(cygpath -D -m)/../" daemon UV4
        fi
    fi
}

# set windows code page as 437 (English)
wincpEN ()
{
    if [[ "$OSTYPE" == "cygwin" ]]; then
        cmd.exe /c "chcp 437" 2>/dev/null 1>/dev/null
    fi
}

# set windows code page as 936 (Simplified Chinese)
wincpCH ()
{
    if [[ "$OSTYPE" == "cygwin" ]]; then
        cmd.exe /c "chcp 936" 2>/dev/null 1>/dev/null
    fi
}

# workaround windows exe output
winexe ()
{
    $@ | iconv -f GBK -t UTF8 | tr -d '\r'
}

# translate
translate ()
{
    \trans -hl zh :zh+en "$@" | less
}

# Dumpbin function for windows
dumpbin_func ()
{
    mode=$1
    shift
    while (($#!=0))
    do
        case $mode in
            'machine')      dumpbin /HEADERS $1 | tr -d '\r' | awk "/machine \(/{print \$3 \": $1\"}"
            ;;
            'dependents')   dumpbin /DEPENDENTS $1 | tr -d '\r'
            ;;
            'exports')      dumpbin /EXPORTS $1 | tr -d '\r'
            ;;
        esac
        shift
    done
}

# du&sort: Stats directorys size and sort it
ds ()
{
    du -h --max-depth=1 $1 | sort -rh
}

# vim directory diff
vimdiff-dir ()
{
    vim -c ":DirDiff $1 $2"
}

# latest
latest ()
{
    find "$@" -type f -printf "%TY-%Tm-%Td %TT \t%p\n" | sort -rn | less -F
}

# find file
ff ()
{
    dir=""
    for i; do
        if [[ "$1" == "-d" ]]; then
            if [[ -d "$2" ]]; then
                dir="$dir $2"
            fi
            shift; shift
        else
            break
        fi
    done
    for i; do
        p=$(sed 's/\$$//g' <<< "$i")
        if [[ "$p" == "$i" ]]; then
            eval "find $dir -iname '*$p*'"
        else
            eval "find $dir -iname '$p'"
        fi
    done
}

# grep pattern
gg ()
{
    dir=""
    for i; do
        if [[ "$1" == "-d" ]]; then
            if [[ -d "$2" ]]; then
                dir="$dir $2"
            fi
            shift; shift
        else
            break
        fi
    done
    for i; do
        eval "ag --color-match 31 -i '$i' $dir" #--nogroup
    done
}

# grep pattern
ggg ()
{
    dir=""
    for i; do
        if [[ "$1" == "-d" ]]; then
            if [[ -d "$2" ]]; then
                dir="$dir $2"
            fi
            shift; shift
        else
            break
        fi
    done
    for i; do
        eval "ag --color-match 31 --hidden --all-text -i '$i' $dir" #--nogroup
    done
}

# do some commands in each sub-directory
dirdo ()
{
    find . -maxdepth 1 -mindepth 1 -type d -exec sh -c "(echo -e \"\e[33m{}:\e[0m\" && cd '{}' && eval '$*'; echo)" \;
}

# Count the number of times a word appears in files
# $ count <PATTERN> <FILES>
count ()
{
    grep -o "$@" | wc -l
}

# loop command times
loop ()
{
    num=0
    if [[ "$1" == -* ]]; then
        num=${1#-}
        shift
    fi

    if [[ "$num" == "0" ]]; then
        while true; do
            eval "$@"
        done
    else
        for ((i=0;i<$num;i++)); do
            eval "$@"
        done
    fi

    unset $num
}

# diff pach file
diffpath ()
{
    if [[ -d "$1" && -d "$2" ]]; then
        diff -U0 <(cd "$1" && find | sort) <(cd "$2" && find | sort)
    else
        echo "Usage: diffpath <path1> <path2>"
    fi
}

# proxy enable/disable
proxy-enable ()
{
    port=${1:-'8118'}
    export http_proxy="http://127.0.0.1:$port"
    export https_proxy="http://127.0.0.1:$port"
    export no_proxy="localhost, 127.0.0.1, ::1"
}
proxy-disable ()
{
    export http_proxy=
    export https_proxy=
    export no_proxy=
}

# make exe file smaller
exe-smaller ()
{
    upx_force=""
    if [[ "$1" == "-f" ]]; then
        upx_force="--force"
        shift
    fi
    if [[ -f "$1" ]]; then
        while (($#!=0)); do
            size_old=$(ls -sh "$1" | awk '{print $1}')
            stripped=$(file "$1" | grep 'stripped')
            upxed=$(file "$1" | grep 'UPX compressed')
            [[ -n "$stripped" ]] && echo "$1: Already striped!"
            [[ -n "$upxed" ]] && echo "$1: Already compressed by UPX!"
            if [[ -z "$stripped" && -z "$upxed" ]]; then
                echo "$1: strip..."
                strip "$1" >/dev/null
            fi
            if [[ -z "$upxed" ]]; then
                echo "$1: upx..."
                upx --best $upx_force "$1" >/dev/null
            fi
            size_new=$(ls -sh "$1" | awk '{print $1}')
            echo "$1: $size_old -> $size_new"
            shift
        done
    else
        cat << EOF
Usage:
  exe-smaller [-f] exe_file
    -f: upx use --force option
EOF
    fi
}

# exe with SelF-eXtracting, use WinRAR
exe-sfx ()
{
    mode='temp'
    # Parse argument
    for i in "$@"; do
        case $i in
            -d) mode='temp'; shift ;;
            -t) mode='notemp_to_temp'; shift ;;
            -a) mode='notemp_to_appdata'; shift ;;
            *) break ;;
        esac
    done
    if [[ -n "$2" ]]; then
        exepath=$1; shift
        exename=${exepath##*/}; exename=${exename%.*}
        time=$(date '+%Y%m%d%H%M%S')
        exeresult=${exename}_sfx.exe
        mkdir -p .sfx
        wrestool -x -t14 $exepath >.sfx/sfx.ico # in icoutils package
        # setup sfx.opt
        echo "Setup=${exepath//\//\\\\} %sfxpar%" >.sfx/sfx.opt
        echo "SetupCode" >>.sfx/sfx.opt
        echo "Silent=1" >>.sfx/sfx.opt
        echo "Update=U" >>.sfx/sfx.opt
        if [[ "$mode" == "notemp_to_temp" ]]; then
            sfxpath="%TEMP%\\RarSFX_LQ\\${exename}_${time}"
            echo "Overwrite=2" >>.sfx/sfx.opt # skip exist files
            echo "Path=$sfxpath" >>.sfx/sfx.opt
        elif [[ "$mode" == "notemp_to_appdata" ]]; then
            sfxpath="%APPDATA%\\RarSFX_LQ\\${exename}_${time}"
            echo "Overwrite=2" >>.sfx/sfx.opt # skip exist files
            echo "Path=$sfxpath" >>.sfx/sfx.opt
        else
            sfxpath="TempMode"
            echo "Overwrite=1" >>.sfx/sfx.opt
            echo "TempMode" >>.sfx/sfx.opt
        fi
        echo "SFX: $sfxpath"
        # WinRAR
        WinRAR a -sfx -afrar -s -m5 -ma -iicon.sfx/sfx.ico -k -z.sfx/sfx.opt $exeresult $@
        rm -r .sfx
    else
        cat << EOF
Usage:
  exe-sfx [-n] setup_exe_file input_files_dirs
    -d: Delete unpack files after exit, unpack to %TEMP% (Default)
    -t: Not delete unpack files after exit, unpack to %TEMP%
    -a: Not delete unpack files after exit, unpack to %APPDATA%
Dependent:
  wrestool: Extract ico from Windows binaries. (icoutils package)
  WinRAR:   Create SFX file
EOF
    fi
}

# Extract ico from Win32 exe
ico-extract ()
{
    echo "Extract to '$1.ico'"
    wrestool -x -t14 $1 >$1.ico
    icotool -l $1.ico
}

# ocr
image2txt ()
{
    tesseract "$1" stdout -l chi_sim
    if [[ "$?" != "0" ]]; then
        echo "Please install 'tesseract-ocr' package"
        echo "Please download 'https://github.com/tesseract-ocr/tessdata_best' [chi_sim.traineddata] to '/usr/share/tessdata/'"
    fi
}

# Format convert
f-bin2hex ()
{
    objcopy --change-addresses $1 -I binary -O ihex $2 ${3:-${2%.*}.hex}
}
f-hex2bin ()
{
    objcopy -I ihex -O binary $1 ${2:-${1%.*}.bin}
}
f-elf2hex ()
{
    objcopy -O ihex $1 ${2:-${1%.*}.hex}
}
f-elf2hex-arm ()
{
    arm-none-eabi-objcopy -O ihex $1 ${2:-${1%.*}.hex}
}
f-elf2hex-keil ()
{
    fromelf.exe --i32 --output ${2:-${1%.*}.hex} $1
}
f-elf2bin ()
{
    objcopy -O binary $1 ${2:-${1%.*}.bin}
}
f-elf2bin-arm ()
{
    arm-none-eabi-objcopy -O binary $1 ${2:-${1%.*}.bin}
}
f-elf2bin-keil ()
{
    fromelf.exe --bin --output ${2:-${1%.*}.bin} $1
}
f-elf2dis ()
{
    objdump -d $1 > ${2:-${1%.*}.dis}
}
f-elf2dis-arm ()
{
    arm-none-eabi-objdump -d $1 > ${2:-${1%.*}.dis}
}
f-elf2dis-keil ()
{
    fromelf.exe --text -c --output ${2:-${1%.*}.dis} $1
}
f-elf2sym ()
{
    objdump -x $1
}
f-bin2dis-arm-thumb ()
{
    arm-none-eabi-objdump -D -b binary -m arm -M force-thumb $1 > ${2:-${1%.*}.dis}
}
f-hex2dis-arm-thumb ()
{
    arm-none-eabi-objdump -D -b ihex -m arm -M force-thumb $1 > ${2:-${1%.*}.dis}
}
f-addr2func-arm ()
{
    if [[ -f $1 && -f $2 ]] ; then
        cat $2 | xargs arm-none-eabi-addr2line -p -f -e $1 | awk '{if(a!=$0){print $0; a=$0;}}'
    else
        arm-none-eabi-addr2line -p -f -e $1 $2 | awk '{if(a!=$0){print $0; a=$0;}}'
    fi
}

# ffmpeg
mpg ()
{
    if [[ -z "$2" ]]; then
        if [[ -z "$1" ]]; then
            echo "  mpg a.mp4                       Show media file infomation"
            echo "  mpg 640x360 a.mp4               Scale to 640x360"
            echo "  mpg 00:01:00-00:02:00 a.mp4     Cut from 00:01:00 to 00:02:00"
            echo "  mpg .avi a.mp4                  Covert to .avi format"
            echo "  mpg + 1.mp4 2.mp4 3.mp4         Conbine all media files"
        else
            ffmpeg -hide_banner -i "$1"
        fi
    else
        # Show info
        if grep -q '[0-9]\+x[0-9]\+' <<<"$1"; then
            ffmpeg -hide_banner -i "$2" -s "$1" -c:a copy "${1}_${2}"

        # Cut (TIME1 - TIME2)
        elif grep -q '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]-[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' <<<"$1"; then
            ss=$(sed 's/-.*//' <<<"$1")
            to=$(sed 's/.*-//' <<<"$1")
            tm=$(sed 's/://g' <<<"$1")
            ffmpeg -hide_banner -i "$2" -ss "$ss" -to "$to" -c copy "${tm}_${2}"

        # Cut (TIME - END)
        elif grep -q '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]-' <<<"$1"; then
            ss=$(sed 's/-.*//' <<<"$1")
            tm=$(sed 's/://g' <<<"$1")
            ffmpeg -hide_banner -i "$2" -ss "$ss" -c copy "${tm}END_${2}"

        # Cut (Begin - TIME)
        elif grep -q -e '-[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' <<<"$1"; then
            to=$(sed 's/.*-//' <<<"$1")
            tm=$(sed 's/://g' <<<"$1")
            ffmpeg -hide_banner -i "$2" -to "$to" -c copy "BEGIN${tm}_${2}"

        # Convert
        elif grep -q '\..\+' <<<"$1"; then
            ffmpeg -hide_banner -i "$2" -qscale 0 "${2%.*}$1"

        # Combine
        elif grep -q '+' <<<"$1"; then
            shift
            touch combine.list
            for i in "$@"; do
                echo file \'$i\' >> combine.list
            done
            ffmpeg -f concat -safe 0 -i combine.list -c copy "+.${1##*.}"
            rm combine.list

        else
            echo "Invalid parameters!"
        fi
    fi
}

# url encode and decode
urlencode ()
{
    if [[ -t 0 ]]; then
        urlcode_data="$*"
    else
        urlcode_data="$(cat -)"
    fi
    python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.argv[1], sys.argv[2]))" "$urlcode_data" "$urlencode_safe"
}
urldecode ()
{
    if [[ -t 0 ]]; then
        urlcode_data="$*"
    else
        urlcode_data="$(cat -)"
    fi
    python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.argv[1]))" "$urlcode_data"
}

# net info from port or exe name
netinfo ()
{
    wincpEN
    if [[ -n "$1" ]]; then
        _tasklists=$(winexe tasklist.exe)
        _netstats=$(winexe netstat.exe -aon)
        if [[ "$(awk '/^[0-9]+$/' <<< $1)" == "$1" ]]; then
            # check local port
            _port=$1
            _nets=$(awk "\$2 ~ /:$_port\$/" <<< $_netstats)
            if [[ -n "$_nets" ]]; then
                while read _net; do
                    _proto=$(awk '{print $1}' <<< $_net)
                    _localaddr=$(awk '{print $2}' <<< $_net)
                    _foreignaddr=$(awk '{print $3}' <<< $_net)
                    _state=$(awk '{print $4}' <<< $_net)
                    _pid=$(awk '{print $NF}' <<< $_net)
                    _exe=$(awk "/\<$_pid\>/{print \$1}" <<< $_tasklists)
                    echo "$_exe($_pid): $_proto $_localaddr → $_foreignaddr $_state"
                done <<<$_nets
            fi
        else
            # check exe name
            _exe=$1
            _pids=$(awk "/\<$_exe\>/{print \$2}" <<< $_tasklists)
            if [[ -n "$_pids" ]]; then
                while read _pid; do
                    _nets="$(awk "\$NF ~ /^$_pid\$/" <<< $_netstats)"
                    if [[ -n "$_nets" ]]; then
                        while read _net; do
                            _proto=$(awk '{print $1}' <<< $_net)
                            _localaddr=$(awk '{print $2}' <<< $_net)
                            _foreignaddr=$(awk '{print $3}' <<< $_net)
                            _state=$(awk '{print $4}' <<< $_net)
                            [[ "$_state" == "$_pid" ]] && _state=""
                            echo "$_exe($_pid): $_proto $_localaddr → $_foreignaddr $_state"
                        done <<<$_nets
                    fi
                done <<<$_pids
            fi
        fi
    else
        winexe netstat.exe -aon -p tcp
        echo
        echo "Usage: netinfo <local-port> <exe-name>"
        winexe netsh.exe interface ipv4 show excludedportrange protocol=tcp
        echo "Excluded port may be is excluded by Hyper-V"
        echo "Try:"
        echo "  $ dism.exe /Online /Disable-Feature:Microsoft-Hyper-V (which will required a couple of restarts)"
        echo "  $ netsh.exe int ipv4 add excludedportrange protocol=tcp startport=$_port numberofports=1"
        echo "  $ dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All (which will required a couple of restarts)"
    fi
}

bcut ()
{
    if [[ -z "$2" ]]; then
        echo "  bcut 0x100-0x200 a.bin     Cut from 0x100 to 0x200"
        echo "  bcut -0x200 a.bin          Cut from Begin to 0x200"
        echo "  bcut 0x100- a.bin          Cut from 0x100 to End"
        return 1
    fi

    # Cut (OFFSET1 - OFFSET2)
    if grep -iq '^[0-9a-fx]\+-[0-9a-fx]\+$' <<<"$1"; then
        a=$(sed 's/-.*//' <<<"$1")
        b=$(sed 's/.*-//' <<<"$1")
        fout="${a}-${b}"

    # Cut (OFFSET1 - END)
    elif grep -iq '^[0-9a-fx]\+-$' <<<"$1"; then
        a=$(sed 's/-.*//' <<<"$1")
        b='1000000000'
        fout="${a}-end"

    # Cut (Begin - OFFSET2)
    elif grep -iq '^-[0-9a-fx]\+$' <<<"$1"; then
        a='0'
        b=$(sed 's/.*-//' <<<"$1")
        fout="begin-${b}"

    else
        echo "Invalid parameters!"
        return 1
    fi

    dd if="$2" of="${fout}_${2##*/}" skip=$(($a)) bs=$(($b-$a)) iflag=skip_bytes count=1
}

#####################################
#             Export                #
#####################################

# TERM with SSH connetion @ref .tmux.conf
if [[ -n "$SSH_CONNECTION" && "$TERM" == "tmux-256color" ]]; then
    export TERM='xterm-256color'
fi

#####################################
#               Misc                #
#####################################

# Disable flow control (ctrl-s, ctrl-q)
#stty -ixon

# For sudo and new command
if [[ -f "/tmp/.init.tmp" ]]; then
    mv -f /tmp/.init.tmp /tmp/.init.tmp2
    source /tmp/.init.tmp2
    rm -rf /tmp/.init.tmp2
else
    echo ""
    echo "                             ! Welcome Qiang !"
fi

