
[user]
    email = fengyichui@gmail.com
    name = fengyichui

[credential]
    helper = store

[core]
    # Commands such as commit and tag that let you edit messages by
    # launching an editor use the value of this variable when it is set
    editor = vim

    # Set to true if you want to have CRLF line endings in your working
    # directory and the repository has LF line endings.
    autocrlf = false

    # If true, makes Git check if converting CRLF is reversible when end-of-line
    # conversion is active. Git will verify if a command modifies a file in the
    # work tree either directly or indirectly.
    safecrlf = true

    # Tells Git if the executable bit of files in the working tree is to be honored.
    filemode = true

    # If this variable is set to false, bytes higher than 0x80 are not
    # considered "unusual" any more.
    quotepath = false

    # pager
    # diff-highlight: https://github.com/git/git/tree/master/contrib/diff-highlight
    # diff-so-fancy: https://github.com/so-fancy/diff-so-fancy
    pager = diff-so-fancy | less # diff-highlight

[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto

[color "diff"]
    meta = 11 #yellow bold
    frag = magenta bold
    func = cyan bold
    commit = yellow
    old = red
    new = green
    whitespace = red reverse

[color "diff-highlight"]
    # oldHighlight = ul
    # oldReset = noul
    oldNormal = red
    oldHighlight = red 52
    newNormal = green
    newHighlight = green 22

[diff-so-fancy]
    # Should the first block of an empty line be colored
    markEmptyLines = false
    # Simplify git header chunks to a more human readable format
    changeHunkIndicators = true
    # Should the pesky + or - at line-start be removed
    stripLeadingSymbols = false
    # By default, the separator for the file header uses Unicode line-drawing characters
    useUnicodeRuler = true

[push]
    default = simple

[pull]
    rebase = false
    ff = only

[diff]
    # Controls which diff tool is used by git-difftool
    tool = vimdiff

    # This algorithm extends the patience algorithm to "support low-occurrence common elements".
    algorithm = histogram

    # Uses a prefix pair that is different from the standard "a/" and "b/"
    # (i)ndex, (w)ork, (c)ommit, (o)bject
    mnemonicPrefix = true

    # not show any source or destination prefix
    #noprefix = true

[difftool]
    # Not prompt before each invocation of the diff tool.
    prompt = false

[difftool "bcompare"]
    # Specify the command to invoke the specified diff tool.
    cmd = "bcompare \"$LOCAL\" \"$REMOTE\""

[merge]
    # Controls which merge tool is used by git-mergetool.
    tool = vimdiff

    # Specify the style in which conflicted hunks are written out to working tree files upon merge.
    # The default is "merge", which shows a <<<<<<< conflict marker, changes made by one side,
    # a ======= marker, changes made by the other side, and then a >>>>>>> marker.
    # An alternate style, "diff3", adds a ||||||| marker and the original text before the ======= marker.
    conflictstyle = diff3

[mergetool]
    # Not prompt before each invocation of the merge resolution program.
    prompt = true

    #  If this is not set to true then the merge target file timestamp is checked and the merge
    #  assumed to have been successful if the file has been updated, otherwise the user is
    #  prompted to indicate the success of the merge.
    trustExitCode = false

[mergetool "bcompare"]
    # Specify the command to invoke the specified merge tool.
    cmd = "bcompare \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""

[tar "tar.xz"]
    command = xz -cv

[svn]
    # see: https://aboullaite.me/migration-from-svn-to-git-a-developer-guide/
    rmdir = true

[alias]
    co  = checkout
    coh = checkout HEAD
    cm = commit
    ca = commit -a
    b = branch
    d  = diff --relative --patch --compact-summary
    dw = diff --relative --patch --compact-summary --word-diff=color --word-diff-regex=".|[_0-9a-zA-Z]+"
    d-branch = "!f() { head=${2:-HEAD} ; ancestor=`git oldest-ancestor ${1:-master} $head` ; git d $ancestor..$head ; }; f"
    d-bcompare = difftool --dir-diff --no-symlinks --tool=bcompare
    d-meld = difftool --dir-diff --tool=meld # --no-symlinks
    d-vimdiff = difftool --tool=vimdiff
    s   = status --short --untracked-files=no
    st  = status --short
    stt = status --short --ignored
    st2 = status --porcelain=2 --untracked-files=no
    sl  = !git s | awk '{print $2}' | xargs ls --color=auto --group-directories-first -ld --time-style=long-iso -h 2>/dev/null
    archivethis = archive HEAD -o archive.zip
    archivethis-xz = archive HEAD -o archive.tar.xz
    archivethis-changed-xz = "!f() { git diff --name-only --diff-filter=ACMRT ${1:-HEAD} | tar -cavf archive-changed.tar.xz -T - ; }; f"
    ls = "!f() { git ls-files | grep "${@:-''}"; }; f"
    lso = ls-files --others --exclude-standard
    lsr = ls-remote
    clone1 = clone --depth=1
    cleanthis = clean -dxf -- ./

    # various pretty loggers from various places
    lg  = !cd -- ${GIT_PREFIX:-.} && LESS=$LESS' -S' git log --graph --pretty=format:'%C(yellow)%cd %C(red)%h%Creset -%C(auto)%d%Creset %s %C(blue)(%an) %C(dim)%C(white)%cr%Creset' --abbrev-commit --date=short
    lgb = !cd -- ${GIT_PREFIX:-.} && git lg --branches
    lc  = !cd -- ${GIT_PREFIX:-.} && git lg ORIG_HEAD.. --name-status
    lf  = !cd -- ${GIT_PREFIX:-.} && git lg --name-status
    lw  = !cd -- ${GIT_PREFIX:-.} && git lgb --author=liqiang --author=fengyichui --since='1 weeks ago'

    # https://github.com/prabirshrestha/ProfilesAndSettings/blob/master/.gitconfig
    # show tags and any tag annotation (tito adds tag annotations for example)
    tags = tag -n1 -l

    # not useful itself, but handy to remember for use in scripts
    thisbranch = rev-parse --abbrev-ref HEAD

    # from https://github.com/cypher/dotfiles/blob/master/gitconfig
    ls-ignored = ls-files --exclude-standard --ignored --others

    # https://github.com/wadey/dotfiles/blob/master/gitconfig
    # check if a branch has been merged into the current HEAD
    #  if on master, "git merged topic" will tell you if topic
    #  has been merged
    merged = !sh -c 'git rev-list HEAD | grep $(git rev-parse $0)'

    # https://github.com/aspiers/git-config/blob/master/bin/git-cdup
    # could be useful for scripts
    cdup = rev-parse --show-cdup

    # also from https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig-alias.txt
    # Thanks to jtolds on stackoverflow
    rebase-recent = !git rebase -i $(git remote-ref)

    # from https://gist.github.com/awood/11189030
    oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -

    # find what commit a file was added
    # usage: `git whatadded --foo.c`
    whatadded = log --follow --diff-filter=A --find-renames=40%

    # submodule foreach do something
    sdo = submodule foreach --recursive

    # All for submodule
    cloneall  = !git clone --recursive
    cloneall1 = !git clone --depth=1 --recursive
    pullall   = !git pull && git submodule update --recursive
    sall      = !git s && git sdo git s
    stall     = !git st && git sdo git st
    sttall    = !git stt && git sdo git stt
    cleanall  = !git clean -dxf && git sdo git clean -dxf
    dall      = !( git --no-pager d --color=always && git sdo git --no-pager d --color=always ) | less

[gui]
    fontui = -family \"DejaVu Sans\" -size 11 -weight normal -slant roman -underline 0 -overstrike 0
    fontdiff = -family \"DejaVu Sans Mono\" -size 11 -weight normal -slant roman -underline 0 -overstrike 0
    tabsize = 4
    displayuntracked = false

